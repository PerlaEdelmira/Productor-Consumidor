import java.security.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
	
interface Buffer{
	public void blockingPut(int valor)throws InterruptedException;
	public int blockingGet() throws InterruptedException;

}
class Producer implements Runnable{
	private static final SecureRandom generador = new SecureRandom();
	private final Buffer sharedLocation;
	
	public Producer(Buffer sharedLocation) {
		this.sharedLocation = sharedLocation;
	}
	@Override
	public void run() {
		int sum = 0;
		for(int i=1; i<=10; i++) {
			try {
				Thread.sleep(generador.nextInt(3000));
				sharedLocation.blockingPut(i);
				sum += i;
				System.out.printf("\t%2d%n", sum);
			} catch (InterruptedException e) {
				Thread.currentThread().interrupt();
				e.printStackTrace();
			}
		}
		System.out.printf("Produce done producing %n Terminating Producer %n ");
	}
}//class Producer
class Consumidor implements Runnable{
	private static final SecureRandom generator = new SecureRandom();
	private final Buffer sharedLocation;
	
	public Consumidor(Buffer sharedLocation) {
		this.sharedLocation = sharedLocation;
	}
	@Override
	public void run() {
		int sum = 0;
		for(int i=1; i<=10; i++) {
			try {
				Thread.sleep(generator.nextInt(3000));
				sum += sharedLocation.blockingGet();
				System.out.printf("\t\t\t%2d%n", sum);
			} catch (InterruptedException e) {
				Thread.currentThread().interrupt();
				e.printStackTrace();
			}
		}
		System.out.printf("%n%s %d%n%s%n","Consumer read values totaling", sum, "Terminating Consumer");		
	}
}//class Consumidor
class UnsynchronizedBuffer implements Buffer{
	private int buffer = -1;
	public void blockingPut(int value) throws InterruptedException{
		System.out.printf("Producer writes\t%2d", value);
		buffer = value;
	}
	public int blockingGet() throws InterruptedException{
		System.out.printf("Consumer reads\t%2d", buffer);
		return buffer;
	}
}//class ExecutorService
public class Prueba {
	public static void main(String[] args)throws InterruptedException{

		ExecutorService executorService = Executors.newCachedThreadPool();
		Buffer sharedLocation = new UnsynchronizedBuffer();
		System.out.println( "Action\t\tValue\tSum of Produced\tSum of Consumed");
		System.out.printf( "------\t\t-----\t---------------\t---------------%n%n");
		
		executorService.execute(new Producer(sharedLocation));
		executorService.execute(new Consumidor(sharedLocation));
		
		executorService.shutdown(); 
		executorService.awaitTermination(1, TimeUnit.MINUTES);
		 
		
	}

}
