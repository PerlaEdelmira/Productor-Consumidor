import java.security.SecureRandom;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

interface Buffer{
	public void blockingPut(int valor)throws InterruptedException;
	public int blockingGet() throws InterruptedException;

}
class SynchronizedBuffer implements Buffer{

	private int buffer = -1;
	private boolean occupied = false;
	
	public synchronized void blockingPut(int value) throws InterruptedException{
		while (occupied) {
			System.out.println("Producer tries to write.");
			displayState("Buffer full. Producer Waits.");
			wait();
		}
		buffer = value;
		occupied = true;
		displayState("Producer writes " + buffer);
		notifyAll();
	}
	public synchronized int blockingGet()throws InterruptedException{
		while (!occupied) {
			System.out.println("Consumer tries to read.");
			displayState("Buffer empty. Concumer Waits.");
			wait();
		}
		occupied = false;
		displayState("Consumer reads " + buffer);
		notifyAll();
		return buffer;
	}
	private synchronized void displayState(String operation) {
		System.out.printf("%-40s%d\t\t%b%n%n", operation, buffer, occupied);
	}
}
class Producer implements Runnable{
	private static final SecureRandom generador = new SecureRandom();
	private final Buffer sharedLocation;
	
	public Producer(Buffer sharedLocation) {
		this.sharedLocation = sharedLocation;
	}
	@Override
	public void run() {
		int sum = 0;
		for(int i=1; i<=10; i++) {
			try {
				Thread.sleep(generador.nextInt(3000));
				sharedLocation.blockingPut(i);
				sum += i;
				System.out.printf("\t%2d%n", sum);
			} catch (InterruptedException e) {
				Thread.currentThread().interrupt();
				e.printStackTrace();
			}
		}
		System.out.printf("Produce done producing %n Terminating Producer %n ");
	}
}//class Producer
class Consumidor implements Runnable{
	private static final SecureRandom generator = new SecureRandom();
	private final Buffer sharedLocation;
	
	public Consumidor(Buffer sharedLocation) {
		this.sharedLocation = sharedLocation;
	}
	@Override
	public void run() {
		int sum = 0;
		for(int i=1; i<=10; i++) {
			try {
				Thread.sleep(generator.nextInt(3000));
				sum += sharedLocation.blockingGet();
				System.out.printf("\t\t\t%2d%n", sum);
			} catch (InterruptedException e) {
				Thread.currentThread().interrupt();
				e.printStackTrace();
			}
		}
		System.out.printf("%n%s%d%n%s%n","Consumer read values totaling", sum, "Terminating Consumer");		
	}
}//class Consumidor
public class PruebaProductorConsumidorSincronizado {

	public static void main(String[] args) {
		ExecutorService executorService = Executors.newCachedThreadPool();
		Buffer sharedLocation = new SynchronizedBuffer();
		
		System.out.printf("%-40s%s\t\t%s%n%-40s%s%n%n", "Operation",
				"Buffer", "Occupied", "---------", "------\t\t--------");

		executorService.execute(new Producer(sharedLocation));
		executorService.execute(new Consumidor(sharedLocation));
	
		executorService.shutdown();
		try {
			executorService.awaitTermination(1, TimeUnit.MINUTES);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}
